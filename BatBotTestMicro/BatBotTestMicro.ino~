#include <Wire.h>
#include <math.h>

#include <Adafruit_Sensor.h>
#include <Adafruit_LSM303_U.h>

#include <Adafruit_NeoPixel.h>


//------ NEOPIXEL STUFF------
#define NP_PIN 6
#define N_NP 16

/* Neopixels------ */
Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_NP, NP_PIN, NEO_GRB + NEO_KHZ800);

/* SENSOR */
/* Assign a unique ID to this sensor at the same time----- */
Adafruit_LSM303_Accel_Unified accel = Adafruit_LSM303_Accel_Unified(54321);

int historicForce = 0x00;
int forceDecay = 5;


void displaySensorDetails(void)
{
  sensor_t sensor;
  accel.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" m/s^2");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" m/s^2");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" m/s^2");  
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

void setup(void) 
{
  Serial.begin(9600);
  Serial.println("Accelerometer Test"); Serial.println("");
  
  /* Initialise the sensor */
  if(!accel.begin())
  {
    /* There was a problem detecting the ADXL345 ... check your connections */
    Serial.println("Ooops, no LSM303 detected ... Check your wiring!");
    while(1);
  }
  
  /* Display some basic information on this sensor */
  displaySensorDetails();

  // Neopixel-----
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

void loop(void) 
{
  /* Get a new sensor event */ 
  sensors_event_t event; 
  accel.getEvent(&event);
 
  /* Display the results (acceleration is measured in m/s^2) */
  /*
  Serial.print("X: "); Serial.print(event.acceleration.x); Serial.print("  ");
  Serial.print("Y: "); Serial.print(event.acceleration.y); Serial.print("  ");
  */
  //  Serial.print("Z: "); Serial.print(event.acceleration.z); Serial.print("  ");Serial.println("m/s^2 ");

  float xSqr = event.acceleration.x * event.acceleration.x;
  float ySqr = event.acceleration.y * event.acceleration.y;

  
  

  long fBang = sqrt( (double)(xSqr + ySqr) );

  int bang = round(fBang * 10.0);  // increase sensitivty, scale int
  // Clamp to 3 gees  3X9ms = ~27
  bang = min(bang, 270);

  

  /*
  Serial.print("Bang: ");
  Serial.println(bang);
  */
  
  if (bang > historicForce){
    historicForce = bang;
  } else {
    historicForce -= forceDecay;
 }

  setRing(historicForce);


  delay(10);



}


void setRing(int force){

  uint16_t i, j;

  j = map(force, 0, 270, 0, 255);


  int br = map(force, 0, 270, 25, 250); // arbituary

  strip.setBrightness(br);


  for(i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, Wheel(j)); 
  }
  strip.show();
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
